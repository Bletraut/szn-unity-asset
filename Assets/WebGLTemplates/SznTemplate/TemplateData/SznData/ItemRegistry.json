{
  "address": "0xB2B6c688Bc8Ae1f732939256903796EB2058bF8e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        }
      ],
      "name": "NewTypeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_itemCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemImages",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemMetadatas",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemSymbols",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_itemTypes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemOwner",
          "type": "address"
        }
      ],
      "name": "balanceOfEach",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "nItems",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemOwner",
          "type": "address"
        }
      ],
      "name": "balanceOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nItems",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemIndex",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "changeERC20toItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_itemName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_itemSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_itemPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_itemMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_itemImage",
          "type": "string"
        }
      ],
      "name": "createType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShopRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getSwapEthForTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getSwapTokenForEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemIndex",
          "type": "uint256"
        }
      ],
      "name": "getType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTypes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "itemSymbols",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "itemTypes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "itemPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "itemContracts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "itemTotalSupply",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "itemsOnSale",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "itemImages",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemOwner",
          "type": "address"
        }
      ],
      "name": "itemsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "itemsOfType",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownedItems",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapEthForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc5a9bffa58e38fc73a825048fa80466638254f98c77d974f8ec0a041da085f2",
  "receipt": {
    "to": null,
    "from": "0x662054314E563BBACdd8be6A88a3b837E393145C",
    "contractAddress": "0xB2B6c688Bc8Ae1f732939256903796EB2058bF8e",
    "transactionIndex": 1,
    "gasUsed": "5072446",
    "logsBloom": "0x00000000000000000000000000008000000000000000000000840000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000008000000000001000000000000008000000000000000000000020000000000000000000800000000000000000000000010000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000020000000000000000000000000000000000400000000000000000000000000000000",
    "blockHash": "0xc63b3c9bc12480dbc35e0be6c0a4f2a1e2972690efb6c3f25c1bef98561b847f",
    "transactionHash": "0xbc5a9bffa58e38fc73a825048fa80466638254f98c77d974f8ec0a041da085f2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12221501,
        "transactionHash": "0xbc5a9bffa58e38fc73a825048fa80466638254f98c77d974f8ec0a041da085f2",
        "address": "0xB2B6c688Bc8Ae1f732939256903796EB2058bF8e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000662054314e563bbacdd8be6a88a3b837e393145c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc63b3c9bc12480dbc35e0be6c0a4f2a1e2972690efb6c3f25c1bef98561b847f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 12221501,
        "transactionHash": "0xbc5a9bffa58e38fc73a825048fa80466638254f98c77d974f8ec0a041da085f2",
        "address": "0xB2B6c688Bc8Ae1f732939256903796EB2058bF8e",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000662054314e563bbacdd8be6a88a3b837e393145c"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 1,
        "blockHash": "0xc63b3c9bc12480dbc35e0be6c0a4f2a1e2972690efb6c3f25c1bef98561b847f"
      }
    ],
    "blockNumber": 12221501,
    "cumulativeGasUsed": "5093446",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000000000"
  ],
  "solcInputHash": "210b400d15b037f8cfa422c1de9f7817",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"}],\"name\":\"NewTypeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_itemCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemMetadatas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemSymbols\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_itemTypes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemOwner\",\"type\":\"address\"}],\"name\":\"balanceOfEach\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nItems\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemOwner\",\"type\":\"address\"}],\"name\":\"balanceOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nItems\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeERC20toItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_itemName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_itemSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_itemPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_itemMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_itemImage\",\"type\":\"string\"}],\"name\":\"createType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShopRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSwapEthForTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSwapTokenForEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"itemSymbols\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"itemTypes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"itemContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemTotalSupply\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemsOnSale\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"itemImages\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemOwner\",\"type\":\"address\"}],\"name\":\"itemsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemsOfType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownedItems\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"swapTokenForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ItemRegistry.sol\":\"ItemRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\",\"license\":\"MIT\"},\"contracts/ItemRegistry.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n//SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./YourCollectible.sol\\\";\\n\\ncontract ItemRegistry is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => address) public _itemContracts;\\n    mapping(uint256 => bytes32) public _itemTypes;\\n    mapping(uint256 => bytes32) public _itemSymbols;\\n    mapping(uint256 => uint256) public _itemPrices;\\n    mapping(uint256 => string) public _itemMetadatas;\\n    mapping(uint256 => string) public _itemImages;\\n\\n    uint256 public _itemCounter;\\n    address public beneficiary;\\n\\n    uint256 private _shopRevenue;\\n\\n    event NewTypeCreated(address indexed itemAddress);\\n\\n    constructor(uint256 initialSupply) public ERC20(\\\"Soznanie\\\", \\\"SZN\\\") {\\n        _mint(msg.sender, initialSupply);\\n        beneficiary = msg.sender;\\n    }\\n\\n    // @notice Creates new item type: defines its description and price.\\n    // @dev Deploys new YourCollectible ERC-721 Contract.\\n    function createType(bytes32 _itemName, bytes32 _itemSymbol, uint256 _itemPrice, string memory _itemMetadata, string memory _itemImage)\\n        public\\n        onlyOwner\\n    {\\n        YourCollectible YC = new YourCollectible(\\n            string(abi.encodePacked(_itemName)),\\n            string(abi.encodePacked(_itemSymbol))\\n        );\\n\\n         _itemContracts[_itemCounter] = address(YC);\\n         _itemTypes[_itemCounter] = _itemName;\\n         _itemPrices[_itemCounter] = _itemPrice;\\n         _itemSymbols[_itemCounter] = _itemSymbol;\\n         _itemMetadatas[_itemCounter] = _itemMetadata;\\n         _itemImages[_itemCounter] = _itemImage;\\n         _itemCounter++;\\n\\n         emit NewTypeCreated(_itemContracts[_itemCounter]);\\n    }\\n\\n    function getType(uint256 _itemIndex)\\n        public\\n        view\\n        returns (bytes32, bytes32, uint256, address, uint256, uint256, string memory)\\n    {\\n        return (\\n            _itemSymbols[_itemIndex],\\n            _itemTypes[_itemIndex],\\n            _itemPrices[_itemIndex],\\n            _itemContracts[_itemIndex],\\n            YourCollectible(_itemContracts[_itemIndex]).totalSupply(),\\n            YourCollectible(_itemContracts[_itemIndex]).balanceOf(address(this)),\\n            _itemImages[_itemIndex]\\n        );\\n    }\\n\\n    // @notice Returns all exsisting items\\n    function getTypes()\\n        public\\n        view\\n        returns (bytes32[] memory itemSymbols, bytes32[] memory itemTypes, uint256[] memory itemPrices, address[] memory itemContracts, uint256[] memory itemTotalSupply, uint256[] memory itemsOnSale, string[] memory itemImages)\\n    {\\n        itemSymbols = new bytes32[](_itemCounter);\\n        itemTypes = new bytes32[](_itemCounter);\\n        itemPrices = new uint256[](_itemCounter);\\n        itemContracts = new address[](_itemCounter);\\n        itemTotalSupply = new uint256[](_itemCounter);\\n        itemsOnSale = new uint256[](_itemCounter);\\n        itemImages = new string[](_itemCounter);\\n\\n        for(uint256 i = 0; i < _itemCounter; i++) {\\n            YourCollectible item = YourCollectible(_itemContracts[i]);\\n            itemSymbols[i] = _itemSymbols[i];\\n            itemTypes[i] = _itemTypes[i];\\n            itemPrices[i] = _itemPrices[i];\\n            itemContracts[i] = _itemContracts[i];\\n            itemImages[i] = _itemImages[i];\\n            itemTotalSupply[i] = item.totalSupply();\\n            itemsOnSale[i] = item.balanceOf(address(this));\\n        }\\n\\n        return (itemSymbols, itemTypes, itemPrices, itemContracts, itemTotalSupply, itemsOnSale, itemImages);\\n    }\\n\\n    function buyItem(uint256 _itemIndex)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        require(msg.value == _itemPrices[_itemIndex], \\\"Wrong price paid\\\");\\n        _shopRevenue += msg.value;\\n\\n        YourCollectible item = YourCollectible(_itemContracts[_itemIndex]);\\n        require(item.balanceOf(address(this)) > 0, \\\"ItemRegistry: Out of stock\\\");\\n        item.transferFrom(address(this), msg.sender, item.itemsOf(address(this))[0]);\\n    }\\n\\n    function mint(uint256 _itemIndex, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        YourCollectible item = YourCollectible(_itemContracts[_itemIndex]);\\n        for (uint256 i = 0; i < _amount; i++) {\\n            item.mintItem(address(this), _itemImages[_itemIndex]);\\n        }\\n    }\\n\\n    // @notice Returns total number of items of all types owned by the user\\n    function balanceOfItem(address _itemOwner)\\n        public\\n        view\\n        returns (uint256 nItems)\\n    {\\n        for (uint256 i = 0; i < _itemCounter; i++) {\\n            nItems += YourCollectible(_itemContracts[i]).balanceOf(_itemOwner);\\n        }\\n    }\\n\\n    function balanceOfEach(address _itemOwner)\\n        public\\n        view\\n        returns (uint256[] memory nItems)\\n    {\\n        nItems = new uint256[](_itemCounter);\\n        for (uint256 i = 0; i < _itemCounter; i++) {\\n            nItems[i] = YourCollectible(_itemContracts[i]).balanceOf(_itemOwner);\\n        }\\n    }\\n\\n    // @notice Returns list of item ids of all types owned by the user\\n    function itemsOf(address _itemOwner)\\n        public\\n        view\\n        returns (uint256[] memory itemsOfType, uint256[] memory ownedItems)\\n    {\\n        itemsOfType = new uint256[](_itemCounter);\\n        uint256 nItems = balanceOfItem(_itemOwner);\\n        ownedItems = new uint256[](nItems);\\n\\n        uint256 lastIdx;\\n        for(uint256 i = 0; i < _itemCounter; i++) {\\n            YourCollectible item = YourCollectible(_itemContracts[i]);\\n            itemsOfType[i] = item.balanceOf(_itemOwner);\\n            uint256[] memory ownedItemsOfType = item.itemsOf(_itemOwner);\\n            for(uint256 j = 0; j < itemsOfType[i]; j++) {\\n                ownedItems[lastIdx] = ownedItemsOfType[j];\\n                lastIdx++;\\n            }\\n        }\\n    }\\n\\n    function getShopRevenue() public view returns(uint256) {\\n        return _shopRevenue;\\n    }\\n\\n    // @notice Sends all of the proceeds from selling items to the beneficiary\\n    function withdraw() public {\\n        require(msg.sender == beneficiary, \\\"ItemRegistry: caller is not the beneficiary\\\");\\n        uint256 valueToTransfer = _shopRevenue;\\n        _shopRevenue = 0;\\n        \\n        (bool success, ) = beneficiary.call{value: valueToTransfer}(\\\"\\\");\\n\\n        require(success, \\\"ItemRegistry: withdrawal failed\\\");\\n    }\\n\\n    function forceWithdraw() public {\\n        require(msg.sender == beneficiary, \\\"ItemRegistry: caller is not the beneficiary\\\");\\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"ItemRegistry: withdrawal failed\\\");\\n    }\\n\\n    function getSwapEthForTokenPrice(uint256 value)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 val = (value.mul(totalSupply())).div(address(this).balance);\\n        return val;\\n    }\\n\\n    // @notice create new ERC20 tokens and send it to msg.sender\\n    function swapEthForToken() external payable\\n        returns (uint256)\\n    {\\n        uint256 val = (msg.value.mul(totalSupply())).div((address(this).balance).sub(msg.value));\\n        \\n        _mint(msg.sender, val);\\n        return val;\\n    }\\n\\n    function getSwapTokenForEthPrice(uint256 value)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 val = (value.mul(address(this).balance)).div(totalSupply());\\n        return val;\\n    }\\n\\n    // @notice burns ERC20 tokens and send liquidity to msg.sender\\n    function swapTokenForEth(uint256 value) external\\n    {\\n        require(balanceOf(msg.sender) >= value, \\\"Wrong balance\\\");\\n        uint256 val = (value.mul(address(this).balance)).div(totalSupply());\\n\\n        _burn(msg.sender,value);\\n\\n        (bool success, ) = msg.sender.call{value: val}(\\\"\\\");\\n        require(success, \\\"ItemRegistry: withdrawal failed\\\");\\n    }\\n\\n    // @notice Allows users to mint new items in exchange for a fixed ETH price\\n    function changeERC20toItem(uint256 _itemIndex, uint256 _amount)\\n        external\\n        returns (uint256)\\n    {\\n        require(balanceOf(msg.sender) >= _itemPrices[_itemIndex].mul(_amount), \\\"Wrong balance\\\");\\n        _burn(msg.sender, _itemPrices[_itemIndex].mul(_amount));\\n\\n        YourCollectible item = YourCollectible(_itemContracts[_itemIndex]);\\n        for (uint256 i = 0; i < _amount; i++) {\\n            item.mintItem(msg.sender, \\\"\\\");\\n        }\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == beneficiary, \\\"ItemRegistry: Only allowed for beneficiary\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x99fb5aadecc0dc8c30fa700649d8b49aec85525e990e6cfaf557f2b31b91e8cb\",\"license\":\"UNLICENSED\"},\"contracts/YourCollectible.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n//SPDX-License-Identifier: UNLICENSED\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\ncontract YourCollectible is ERC721, Ownable\\n {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURIextended;\\n\\n    constructor(string memory _itemName, string memory _itemSymbol) public ERC721(_itemName, _itemSymbol) {\\n        _baseURIextended = \\\"https://ipfs.io/ipfs/\\\";\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual override {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return _baseURIextended;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    function mintItem(address to, string memory _tokenURI)\\n        public\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        _tokenIds.increment();\\n\\n        uint256 id = _tokenIds.current();\\n        _mint(to, id);\\n        _setTokenURI(id, _tokenURI);\\n\\n        return id;\\n    }\\n\\n    function itemsOf(address _itemOwner)\\n        public\\n        view\\n        returns (uint256[] memory ownedItems)\\n    {\\n        uint256 nItems = balanceOf(_itemOwner);\\n        ownedItems = new uint256[](nItems);\\n        for(uint256 i = 0; i < nItems; i++) {\\n            ownedItems[i] = tokenOfOwnerByIndex(_itemOwner, i);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6805a0c5131662cd005cb9c222f55c92f85a58cc787101f02002a45270c7d2bb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005bcc38038062005bcc8339810160408190526200003491620002f6565b60405180604001604052806008815260200167536f7a6e616e696560c01b8152506040518060400160405280600381526020016229ad2760e91b8152508160039080519060200190620000899291906200025a565b5080516200009f9060049060208401906200025a565b50506005805460ff19166012179055506000620000bb62000136565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200011d33826200013a565b50600d80546001600160a01b0319163317905562000386565b3390565b6001600160a01b0382166200016c5760405162461bcd60e51b8152600401620001639062000346565b60405180910390fd5b6200017a6000838362000226565b62000196816002546200022b60201b6200218d1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001c99183906200218d6200022b821b17901c565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200021a9085906200037d565b60405180910390a35050565b505050565b600082820183811015620002535760405162461bcd60e51b815260040162000163906200030f565b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029d57805160ff1916838001178555620002cd565b82800160010185558215620002cd579182015b82811115620002cd578251825591602001919060010190620002b0565b50620002db929150620002df565b5090565b5b80821115620002db5760008155600101620002e0565b60006020828403121562000308578081fd5b5051919050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b61583680620003966000396000f3fe6080604052600436106200025f5760003560e01c8063715018a6116200013f578063ae86041d11620000bb578063c72514aa1162000079578063c72514aa146200074d578063d87bcae21462000772578063dd62ed3e1462000797578063e7fb74c714620007bc578063f2fde38b14620007d3576200029d565b8063ae86041d146200068c578063b00f8ea514620006b1578063b4579d6014620006d6578063b46c84341462000703578063b58ce7171462000728576200029d565b806395d89b41116200010957806395d89b4114620005ed5780639ffc03b11462000605578063a457c2d7146200061d578063a51edecb1462000642578063a9059cbb1462000667576200029d565b8063715018a614620005705780637231a87614620005885780637be80b3914620005bd5780638da5cb5b14620005d5576200029d565b8063313ce56711620001db578063471de5521162000199578063471de55214620004a8578063523298de14620004cd57806362f5d6b61462000501578063685b7828146200052657806370a08231146200054b576200029d565b8063313ce56714620003e357806338af3eed146200040a5780633950935114620004315780633ccfd60b14620004565780634036ab78146200046e576200029d565b806318160ddd116200022957806318160ddd14620003525780631917a07a146200036a5780631b2ef1ca146200038f57806323b872dd14620003b45780633050673214620003d9576200029d565b80630595f16214620002a257806306fdde0314620002c7578063095ea7b314620002f75780630f432b43146200032b576200029d565b366200029d57600d546001600160a01b031633146200029b5760405162461bcd60e51b8152600401620002929062002e66565b60405180910390fd5b005b600080fd5b348015620002af57600080fd5b506200029b620002c1366004620028ac565b620007f8565b348015620002d457600080fd5b50620002df620009af565b604051620002ee919062002cef565b60405180910390f35b3480156200030457600080fd5b506200031c62000316366004620027e1565b62000a49565b604051620002ee919062002c96565b3480156200033857600080fd5b506200034362000a6b565b604051620002ee919062002a75565b3480156200035f57600080fd5b506200034362000a71565b3480156200037757600080fd5b50620003436200038936600462002930565b62000a77565b3480156200039c57600080fd5b506200029b620003ae36600462002962565b62000aa3565b348015620003c157600080fd5b506200031c620003d33660046200279c565b62000baf565b6200034362000c41565b348015620003f057600080fd5b50620003fb62000c7d565b604051620002ee919062003168565b3480156200041757600080fd5b506200042262000c86565b604051620002ee919062002a81565b3480156200043e57600080fd5b506200031c62000450366004620027e1565b62000c95565b3480156200046357600080fd5b506200029b62000cea565b3480156200047b57600080fd5b50620004936200048d36600462002930565b62000daf565b604051620002ee979695949392919062002ca1565b348015620004b557600080fd5b5062000343620004c736600462002930565b62000fb5565b348015620004da57600080fd5b50620004f2620004ec36600462002745565b62000fc7565b604051620002ee919062002c4f565b3480156200050e57600080fd5b50620003436200052036600462002962565b620010d8565b3480156200053357600080fd5b50620002df6200054536600462002930565b62001200565b3480156200055857600080fd5b50620003436200056a36600462002745565b6200129f565b3480156200057d57600080fd5b506200029b620012ba565b3480156200059557600080fd5b50620005ad620005a736600462002745565b62001350565b604051620002ee92919062002c64565b348015620005ca57600080fd5b506200029b620015a3565b348015620005e257600080fd5b50620004226200165b565b348015620005fa57600080fd5b50620002df6200166f565b3480156200061257600080fd5b5062000343620016d3565b3480156200062a57600080fd5b506200031c6200063c366004620027e1565b620016d9565b3480156200064f57600080fd5b50620003436200066136600462002930565b62001749565b3480156200067457600080fd5b506200031c62000686366004620027e1565b62001766565b3480156200069957600080fd5b506200029b620006ab36600462002930565b6200177e565b348015620006be57600080fd5b5062000343620006d036600462002745565b6200185d565b348015620006e357600080fd5b50620006ee6200190c565b604051620002ee979695949392919062002b7e565b3480156200071057600080fd5b50620002df6200072236600462002930565b62001def565b3480156200073557600080fd5b50620003436200074736600462002930565b62001e5a565b3480156200075a57600080fd5b50620003436200076c36600462002930565b62001e6c565b3480156200077f57600080fd5b50620004226200079136600462002930565b62001e7e565b348015620007a457600080fd5b5062000343620007b636600462002763565b62001e99565b62000343620007cd36600462002930565b62001ec4565b348015620007e057600080fd5b506200029b620007f236600462002745565b620020b7565b62000802620021b5565b6001600160a01b0316620008156200165b565b6001600160a01b0316146200083e5760405162461bcd60e51b815260040162000292906200300b565b60008560405160200162000853919062002a75565b6040516020818303038152906040528560405160200162000875919062002a75565b604051602081830303815290604052604051620008929062002616565b6200089f92919062002d04565b604051809103906000f080158015620008bc573d6000803e3d6000fd5b50600c8054600090815260066020908152604080832080546001600160a01b0319166001600160a01b03871617905583548352600782528083208b9055835483526009825280832089905583548352600882528083208a905592548252600a815291902085519293506200093592909186019062002624565b50600c546000908152600b6020908152604090912083516200095a9285019062002624565b50600c8054600101908190556000908152600660205260408082205490516001600160a01b03909116917f2b4d92f463e237fda874ac33e17432932f4e012d4d45b91af877361fc871840991a2505050505050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801562000a3f5780601f1062000a135761010080835404028352916020019162000a3f565b820191906000526020600020905b81548152906001019060200180831162000a2157829003601f168201915b5050505050905090565b600062000a6162000a59620021b5565b8484620021b9565b5060015b92915050565b600c5481565b60025490565b60008062000a9c4762000a9562000a8d62000a71565b869062002275565b90620022b5565b9392505050565b62000aad620021b5565b6001600160a01b031662000ac06200165b565b6001600160a01b03161462000ae95760405162461bcd60e51b815260040162000292906200300b565b6000828152600660205260408120546001600160a01b0316905b8281101562000ba9576000848152600b602052604090819020905163110bcd4560e01b81526001600160a01b0384169163110bcd459162000b4991309160040162002ab9565b602060405180830381600087803b15801562000b6457600080fd5b505af115801562000b79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9f919062002949565b5060010162000b03565b50505050565b600062000bbe848484620022eb565b62000c378462000bcd620021b5565b62000c3185604051806060016040528060288152602001620057b4602891396001600160a01b038a1660009081526001602052604081209062000c0f620021b5565b6001600160a01b0316815260208101919091526040016000205491906200240f565b620021b9565b5060019392505050565b60008062000c6a62000c5447346200243e565b62000a9562000c6262000a71565b349062002275565b905062000c78338262002469565b905090565b60055460ff1690565b600d546001600160a01b031681565b600062000a6162000ca5620021b5565b8462000c31856001600062000cb9620021b5565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906200218d565b600d546001600160a01b0316331462000d175760405162461bcd60e51b8152600401620002929062002f1e565b600e8054600091829055600d546040519192916001600160a01b0390911690839062000d439062002a7e565b60006040518083038185875af1925050503d806000811462000d82576040519150601f19603f3d011682016040523d82523d6000602084013e62000d87565b606091505b505090508062000dab5760405162461bcd60e51b8152600401620002929062002f69565b5050565b60008181526008602090815260408083205460078352818420546009845282852054600685528386205484516318160ddd60e01b81529451879687968796879687966060969295919490936001600160a01b039093169283926318160ddd92600480840193919291829003018186803b15801562000e2c57600080fd5b505afa15801562000e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e67919062002949565b60008d815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a082319062000ea690309060040162002a81565b60206040518083038186803b15801562000ebf57600080fd5b505afa15801562000ed4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000efa919062002949565b60008e8152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290929183919083018282801562000f955780601f1062000f695761010080835404028352916020019162000f95565b820191906000526020600020905b81548152906001019060200180831162000f7757829003601f168201915b505050505090509650965096509650965096509650919395979092949650565b60076020526000908152604090205481565b6060600c546001600160401b038111801562000fe257600080fd5b506040519080825280602002602001820160405280156200100d578160200160208202803683370190505b50905060005b600c54811015620010d257600081815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a08231906200105d90869060040162002a81565b60206040518083038186803b1580156200107657600080fd5b505afa1580156200108b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010b1919062002949565b828281518110620010be57fe5b602090810291909101015260010162001013565b50919050565b600082815260096020526040812054620010f3908362002275565b620010fe336200129f565b10156200111f5760405162461bcd60e51b8152600401620002929062003040565b6000838152600960205260409020546200114790339062001141908562002275565b62002534565b6000838152600660205260408120546001600160a01b0316905b83811015620011f85760405163110bcd4560e01b81526001600160a01b0383169063110bcd45906200119890339060040162002b5b565b602060405180830381600087803b158015620011b357600080fd5b505af1158015620011c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ee919062002949565b5060010162001161565b505092915050565b600a6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015620012975780601f106200126b5761010080835404028352916020019162001297565b820191906000526020600020905b8154815290600101906020018083116200127957829003601f168201915b505050505081565b6001600160a01b031660009081526020819052604090205490565b620012c4620021b5565b6001600160a01b0316620012d76200165b565b6001600160a01b031614620013005760405162461bcd60e51b815260040162000292906200300b565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b606080600c546001600160401b03811180156200136c57600080fd5b5060405190808252806020026020018201604052801562001397578160200160208202803683370190505b5091506000620013a7846200185d565b9050806001600160401b0381118015620013c057600080fd5b50604051908082528060200260200182016040528015620013eb578160200160208202803683370190505b5091506000805b600c548110156200159b57600081815260066020526040908190205490516370a0823160e01b81526001600160a01b039091169081906370a08231906200143e908a9060040162002a81565b60206040518083038186803b1580156200145757600080fd5b505afa1580156200146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001492919062002949565b8683815181106200149f57fe5b6020908102919091010152604051633918d43b60e11b81526060906001600160a01b03831690637231a87690620014db908b9060040162002a81565b60006040518083038186803b158015620014f457600080fd5b505afa15801562001509573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200153391908101906200280e565b905060005b8784815181106200154557fe5b60200260200101518110156200158f578181815181106200156257fe5b60200260200101518786815181106200157757fe5b60209081029190910101526001948501940162001538565b505050600101620013f2565b505050915091565b600d546001600160a01b03163314620015d05760405162461bcd60e51b8152600401620002929062002f1e565b600d546040516000916001600160a01b0316904790620015f09062002a7e565b60006040518083038185875af1925050503d80600081146200162f576040519150601f19603f3d011682016040523d82523d6000602084013e62001634565b606091505b5050905080620016585760405162461bcd60e51b8152600401620002929062002f69565b50565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801562000a3f5780601f1062000a135761010080835404028352916020019162000a3f565b600e5490565b600062000a61620016e9620021b5565b8462000c3185604051806060016040528060258152602001620057dc602591396001600062001717620021b5565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906200240f565b60008062000a9c6200175a62000a71565b62000a95854762002275565b600062000a6162001776620021b5565b8484620022eb565b806200178a336200129f565b1015620017ab5760405162461bcd60e51b8152600401620002929062003040565b6000620017c7620017bb62000a71565b62000a95844762002275565b9050620017d5338362002534565b6000336001600160a01b031682604051620017f09062002a7e565b60006040518083038185875af1925050503d80600081146200182f576040519150601f19603f3d011682016040523d82523d6000602084013e62001834565b606091505b5050905080620018585760405162461bcd60e51b8152600401620002929062002f69565b505050565b6000805b600c54811015620010d257600081815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a0823190620018ab90869060040162002a81565b60206040518083038186803b158015620018c457600080fd5b505afa158015620018d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ff919062002949565b9091019060010162001861565b6060806060806060806060600c546001600160401b03811180156200193057600080fd5b506040519080825280602002602001820160405280156200195b578160200160208202803683370190505b509650600c546001600160401b03811180156200197757600080fd5b50604051908082528060200260200182016040528015620019a2578160200160208202803683370190505b509550600c546001600160401b0381118015620019be57600080fd5b50604051908082528060200260200182016040528015620019e9578160200160208202803683370190505b509450600c546001600160401b038111801562001a0557600080fd5b5060405190808252806020026020018201604052801562001a30578160200160208202803683370190505b509350600c546001600160401b038111801562001a4c57600080fd5b5060405190808252806020026020018201604052801562001a77578160200160208202803683370190505b509250600c546001600160401b038111801562001a9357600080fd5b5060405190808252806020026020018201604052801562001abe578160200160208202803683370190505b509150600c546001600160401b038111801562001ada57600080fd5b5060405190808252806020026020018201604052801562001b1057816020015b606081526020019060019003908162001afa5790505b50905060005b600c5481101562001de55760008181526006602090815260408083205460089092529091205489516001600160a01b03909216918a908490811062001b5757fe5b602002602001018181525050600760008381526020019081526020016000205488838151811062001b8457fe5b602002602001018181525050600960008381526020019081526020016000205487838151811062001bb157fe5b60209081029190910181019190915260008381526006909152604090205486516001600160a01b039091169087908490811062001bea57fe5b6001600160a01b03929092166020928302919091018201526000838152600b82526040908190208054825160026001831615610100026000190190921691909104601f81018590048502820185019093528281529290919083018282801562001c975780601f1062001c6b5761010080835404028352916020019162001c97565b820191906000526020600020905b81548152906001019060200180831162001c7957829003601f168201915b505050505083838151811062001ca957fe5b6020026020010181905250806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001cee57600080fd5b505afa15801562001d03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d29919062002949565b85838151811062001d3657fe5b60209081029190910101526040516370a0823160e01b81526001600160a01b038216906370a082319062001d6f90309060040162002a81565b60206040518083038186803b15801562001d8857600080fd5b505afa15801562001d9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc3919062002949565b84838151811062001dd057fe5b60209081029190910101525060010162001b16565b5090919293949596565b600b6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015620012975780601f106200126b5761010080835404028352916020019162001297565b60086020526000908152604090205481565b60096020526000908152604090205481565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600081815260096020526040812054341462001ef45760405162461bcd60e51b8152600401620002929062002fe1565b600e8054340190556000828152600660205260408082205490516370a0823160e01b81526001600160a01b03909116919082906370a082319062001f3d90309060040162002a81565b60206040518083038186803b15801562001f5657600080fd5b505afa15801562001f6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f91919062002949565b1162001fb15760405162461bcd60e51b8152600401620002929062002ee7565b806001600160a01b03166323b872dd3033846001600160a01b0316637231a876306040518263ffffffff1660e01b815260040162001ff0919062002a81565b60006040518083038186803b1580156200200957600080fd5b505afa1580156200201e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200204891908101906200280e565b6000815181106200205557fe5b60200260200101516040518463ffffffff1660e01b81526004016200207d9392919062002a95565b600060405180830381600087803b1580156200209857600080fd5b505af1158015620020ad573d6000803e3d6000fd5b5050505050919050565b620020c1620021b5565b6001600160a01b0316620020d46200165b565b6001600160a01b031614620020fd5760405162461bcd60e51b815260040162000292906200300b565b6001600160a01b038116620021265760405162461bcd60e51b8152600401620002929062002d70565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008282018381101562000a9c5760405162461bcd60e51b8152600401620002929062002df8565b3390565b6001600160a01b038316620021e25760405162461bcd60e51b81526004016200029290620030ed565b6001600160a01b0382166200220b5760405162461bcd60e51b8152600401620002929062002db6565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906200226890859062002a75565b60405180910390a3505050565b600082620022865750600062000a65565b828202828482816200229457fe5b041462000a9c5760405162461bcd60e51b8152600401620002929062002fa0565b6000808211620022d95760405162461bcd60e51b8152600401620002929062002eb0565b818381620022e357fe5b049392505050565b6001600160a01b038316620023145760405162461bcd60e51b81526004016200029290620030a8565b6001600160a01b0382166200233d5760405162461bcd60e51b8152600401620002929062002d2d565b6200234a83838362001858565b6200238a816040518060600160405280602681526020016200578e602691396001600160a01b03861660009081526020819052604090205491906200240f565b6001600160a01b038085166000908152602081905260408082209390935590841681522054620023bb90826200218d565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200226890859062002a75565b60008184841115620024365760405162461bcd60e51b815260040162000292919062002cef565b505050900390565b600082821115620024635760405162461bcd60e51b8152600401620002929062002e2f565b50900390565b6001600160a01b038216620024925760405162461bcd60e51b8152600401620002929062003131565b620024a06000838362001858565b600254620024af90826200218d565b6002556001600160a01b038216600090815260208190526040902054620024d790826200218d565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200252890859062002a75565b60405180910390a35050565b6001600160a01b0382166200255d5760405162461bcd60e51b8152600401620002929062003067565b6200256b8260008362001858565b620025ab816040518060600160405280602281526020016200576c602291396001600160a01b03851660009081526020819052604090205491906200240f565b6001600160a01b038316600090815260208190526040902055600254620025d390826200243e565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200252890859062002a75565b61258c80620031e083390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200266757805160ff191683800117855562002697565b8280016001018555821562002697579182015b82811115620026975782518255916020019190600101906200267a565b50620026a5929150620026a9565b5090565b5b80821115620026a55760008155600101620026aa565b80356001600160a01b038116811462000a6557600080fd5b600082601f830112620026e9578081fd5b81356001600160401b03811115620026ff578182fd5b62002714601f8201601f191660200162003176565b91508082528360208285010111156200272c57600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121562002757578081fd5b62000a9c8383620026c0565b6000806040838503121562002776578081fd5b620027828484620026c0565b9150620027938460208501620026c0565b90509250929050565b600080600060608486031215620027b1578081fd5b8335620027be81620031c9565b92506020840135620027d081620031c9565b929592945050506040919091013590565b60008060408385031215620027f4578182fd5b620028008484620026c0565b946020939093013593505050565b6000602080838503121562002821578182fd5b82516001600160401b0381111562002837578283fd5b8301601f8101851362002848578283fd5b80516200285f62002859826200319d565b62003176565b81815283810190838501858402850186018910156200287c578687fd5b8694505b83851015620028a057805183526001949094019391850191850162002880565b50979650505050505050565b600080600080600060a08688031215620028c4578081fd5b85359450602086013593506040860135925060608601356001600160401b0380821115620028f0578283fd5b620028fe89838a01620026d8565b9350608088013591508082111562002914578283fd5b506200292388828901620026d8565b9150509295509295909350565b60006020828403121562002942578081fd5b5035919050565b6000602082840312156200295b578081fd5b5051919050565b6000806040838503121562002975578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015620029c257815187529582019590820190600101620029a4565b509495945050505050565b60008282518085526020808601955080818302840101818601855b8481101562002a1a57601f1986840301895262002a0783835162002a27565b98840198925090830190600101620029e8565b5090979650505050505050565b60008151808452815b8181101562002a4e5760208185018101518683018201520162002a30565b8181111562002a605782602083870101525b50601f01601f19169290920160200192915050565b90815260200190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006040820160018060a01b0385168352602060408185015282855460018082166000811462002af2576001811462002b115762002b4d565b60028304607f16865260ff198316606089015260808801935062002b4d565b6002830480875262002b238a620031bd565b885b8281101562002b435781548b82016060015290840190870162002b25565b8a01606001955050505b509198975050505050505050565b6001600160a01b0391909116815260406020820181905260009082015260600190565b600060e0825262002b9360e083018a62002991565b60208382038185015262002ba8828b62002991565b9150838203604085015262002bbe828a62002991565b84810360608601528851808252828a01935090820190845b8181101562002bfd5762002bec83865162002984565b938301939183019160010162002bd6565b5050848103608086015262002c13818962002991565b9250505082810360a084015262002c2b818662002991565b905082810360c084015262002c418185620029cd565b9a9950505050505050505050565b60006020825262000a9c602083018462002991565b60006040825262002c79604083018562002991565b828103602084015262002c8d818562002991565b95945050505050565b901515815260200190565b600088825287602083015286604083015260018060a01b03861660608301528460808301528360a083015260e060c083015262002ce260e083018462002a27565b9998505050505050505050565b60006020825262000a9c602083018462002a27565b60006040825262002d19604083018562002a27565b828103602084015262002c8d818562002a27565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252602a908201527f4974656d52656769737472793a204f6e6c7920616c6c6f77656420666f722062604082015269656e656669636961727960b01b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601a908201527f4974656d52656769737472793a204f7574206f662073746f636b000000000000604082015260600190565b6020808252602b908201527f4974656d52656769737472793a2063616c6c6572206973206e6f74207468652060408201526a62656e656669636961727960a81b606082015260800190565b6020808252601f908201527f4974656d52656769737472793a207769746864726177616c206661696c656400604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526010908201526f15dc9bdb99c81c1c9a58d9481c185a5960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c57726f6e672062616c616e636560981b604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b6040518181016001600160401b03811182821017156200319557600080fd5b604052919050565b60006001600160401b03821115620031b3578081fd5b5060209081020190565b60009081526020902090565b6001600160a01b03811681146200165857600080fdfe60806040523480156200001157600080fd5b506040516200258c3803806200258c833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250839150829050620001b56301ffc9a760e01b620002c3565b8151620001ca9060069060208501906200034c565b508051620001e09060079060208401906200034c565b50620001f36380ac58cd60e01b620002c3565b62000205635b5e139f60e01b620002c3565b6200021763780e9d6360e01b620002c3565b50600090506200022662000348565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506040805180820190915260158082527f68747470733a2f2f697066732e696f2f697066732f00000000000000000000006020909201918252620002ba91600d916200034c565b505050620003e8565b6001600160e01b0319808216141562000323576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038f57805160ff1916838001178555620003bf565b82800160010185558215620003bf579182015b82811115620003bf578251825591602001919060010190620003a2565b50620003cd929150620003d1565b5090565b5b80821115620003cd5760008155600101620003d2565b61219480620003f86000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80636c0360eb116100b857806395d89b411161007c57806395d89b41146104bc578063a22cb465146104c4578063b88d4fde146104f2578063c87b56dd146105b8578063e985e9c5146105d5578063f2fde38b1461060357610142565b80636c0360eb1461040857806370a0823114610410578063715018a6146104365780637231a8761461043e5780638da5cb5b146104b457610142565b806318160ddd1161010a57806318160ddd1461032e57806323b872dd146103365780632f745c591461036c57806342842e0e146103985780634f6ccce7146103ce5780636352211e146103eb57610142565b806301ffc9a71461014757806306fdde0314610182578063081812fc146101ff578063095ea7b314610238578063110bcd4514610266575b600080fd5b61016e6004803603602081101561015d57600080fd5b50356001600160e01b031916610629565b604080519115158252519081900360200190f35b61018a61064c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c45781810151838201526020016101ac565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61021c6004803603602081101561021557600080fd5b50356106e2565b604080516001600160a01b039092168252519081900360200190f35b6102646004803603604081101561024e57600080fd5b506001600160a01b038135169060200135610744565b005b61031c6004803603604081101561027c57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156102a757600080fd5b8201836020820111156102b957600080fd5b803590602001918460018302840111640100000000831117156102db57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061081f945050505050565b60408051918252519081900360200190f35b61031c6108ca565b6102646004803603606081101561034c57600080fd5b506001600160a01b038135811691602081013590911690604001356108db565b61031c6004803603604081101561038257600080fd5b506001600160a01b0381351690602001356108e6565b610264600480360360608110156103ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610908565b61031c600480360360208110156103e457600080fd5b5035610923565b61021c6004803603602081101561040157600080fd5b5035610939565b61018a610961565b61031c6004803603602081101561042657600080fd5b50356001600160a01b03166109c2565b610264610a2a565b6104646004803603602081101561045457600080fd5b50356001600160a01b0316610ae8565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104a0578181015183820152602001610488565b505050509050019250505060405180910390f35b61021c610b76565b61018a610b85565b610264600480360360408110156104da57600080fd5b506001600160a01b0381351690602001351515610be6565b6102646004803603608081101561050857600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561054357600080fd5b82018360208201111561055557600080fd5b8035906020019184600183028401116401000000008311171561057757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ceb945050505050565b61018a600480360360208110156105ce57600080fd5b5035610d49565b61016e600480360360408110156105eb57600080fd5b506001600160a01b0381358116916020013516610fcc565b6102646004803603602081101561061957600080fd5b50356001600160a01b0316610ffa565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b5050505050905090565b60006106ed8261110f565b6107285760405162461bcd60e51b815260040180806020018281038252602c81526020018061205d602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061074f82610939565b9050806001600160a01b0316836001600160a01b031614156107a25760405162461bcd60e51b815260040180806020018281038252602181526020018061210d6021913960400191505060405180910390fd5b806001600160a01b03166107b461111c565b6001600160a01b031614806107d557506107d5816107d061111c565b610fcc565b6108105760405162461bcd60e51b8152600401808060200182810382526038815260200180611fb06038913960400191505060405180910390fd5b61081a8383611120565b505050565b600061082961111c565b6001600160a01b031661083a610b76565b6001600160a01b031614610895576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61089f600b61118e565b60006108ab600b611197565b90506108b7848261119b565b6108c181846112c9565b90505b92915050565b60006108d6600261132c565b905090565b61081a838383611337565b6001600160a01b03821660009081526001602052604081206108c1908361138e565b61081a83838360405180602001604052806000815250610ceb565b60008061093160028461139a565b509392505050565b60006108c48260405180606001604052806029815260200161201260299139600291906113b6565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b60006001600160a01b038216610a095760405162461bcd60e51b815260040180806020018281038252602a815260200180611fe8602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090206108c49061132c565b610a3261111c565b6001600160a01b0316610a43610b76565b6001600160a01b031614610a9e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b60606000610af5836109c2565b90508067ffffffffffffffff81118015610b0e57600080fd5b50604051908082528060200260200182016040528015610b38578160200160208202803683370190505b50915060005b81811015610b6f57610b5084826108e6565b838281518110610b5c57fe5b6020908102919091010152600101610b3e565b5050919050565b600a546001600160a01b031690565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b610bee61111c565b6001600160a01b0316826001600160a01b03161415610c54576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610c6161111c565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610ca561111c565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610cfc610cf661111c565b836113cd565b610d375760405162461bcd60e51b815260040180806020018281038252603181526020018061212e6031913960400191505060405180910390fd5b610d4384848484611471565b50505050565b6060610d548261110f565b610d8f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120de602f913960400191505060405180910390fd5b6000828152600c602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505090506060610e356114c3565b9050805160001415610e4957509050610647565b815115610f0a5780826040516020018083805190602001908083835b60208310610e845780518252601f199092019160209182019101610e65565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610ecc5780518252601f199092019160209182019101610ead565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610647565b80610f1485611524565b6040516020018083805190602001908083835b60208310610f465780518252601f199092019160209182019101610f27565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610f8e5780518252601f199092019160209182019101610f6f565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61100261111c565b6001600160a01b0316611013610b76565b6001600160a01b03161461106e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166110b35760405162461bcd60e51b8152600401808060200182810382526026815260200180611f146026913960400191505060405180910390fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006108c46002836115ff565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061115582610939565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b80546001019055565b5490565b6001600160a01b0382166111f6576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6111ff8161110f565b15611251576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b61125d6000838361081a565b6001600160a01b038216600090815260016020526040902061127f908261160b565b5061128c60028284611617565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6112d28261110f565b61130d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612089602c913960400191505060405180910390fd5b6000828152600c60209081526040909120825161081a92840190611e2c565b60006108c482611197565b61134861134261111c565b826113cd565b6113835760405162461bcd60e51b815260040180806020018281038252603181526020018061212e6031913960400191505060405180910390fd5b61081a83838361162d565b60006108c18383611779565b60008080806113a986866117dd565b9097909650945050505050565b60006113c3848484611858565b90505b9392505050565b60006113d88261110f565b6114135760405162461bcd60e51b815260040180806020018281038252602c815260200180611f84602c913960400191505060405180910390fd5b600061141e83610939565b9050806001600160a01b0316846001600160a01b031614806114595750836001600160a01b031661144e846106e2565b6001600160a01b0316145b8061146957506114698185610fcc565b949350505050565b61147c84848461162d565b61148884848484611922565b610d435760405162461bcd60e51b8152600401808060200182810382526032815260200180611ee26032913960400191505060405180910390fd5b600d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b60608161154957506040805180820190915260018152600360fc1b6020820152610647565b8160005b811561156157600101600a8204915061154d565b60608167ffffffffffffffff8111801561157a57600080fd5b506040519080825280601f01601f1916602001820160405280156115a5576020820181803683370190505b50859350905060001982015b83156115f657600a840660300160f81b828280600190039350815181106115d457fe5b60200101906001600160f81b031916908160001a905350600a840493506115b1565b50949350505050565b60006108c18383611a8a565b60006108c18383611aa2565b60006113c384846001600160a01b038516611aec565b826001600160a01b031661164082610939565b6001600160a01b0316146116855760405162461bcd60e51b81526004018080602001828103825260298152602001806120b56029913960400191505060405180910390fd5b6001600160a01b0382166116ca5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f3a6024913960400191505060405180910390fd5b6116d583838361081a565b6116e0600082611120565b6001600160a01b03831660009081526001602052604090206117029082611b83565b506001600160a01b0382166000908152600160205260409020611725908261160b565b5061173260028284611617565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b815460009082106117bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ec06022913960400191505060405180910390fd5b8260000182815481106117ca57fe5b9060005260206000200154905092915050565b8154600090819083106118215760405162461bcd60e51b815260040180806020018281038252602281526020018061203b6022913960400191505060405180910390fd5b600084600001848154811061183257fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816118f35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118b85781810151838201526020016118a0565b50505050905090810190601f1680156118e55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061190657fe5b9060005260206000209060020201600101549150509392505050565b6000611936846001600160a01b0316611b8f565b61194257506001611469565b6060611a50630a85bd0160e11b61195761111c565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119be5781810151838201526020016119a6565b50505050905090810190601f1680156119eb5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611ee2603291396001600160a01b0388169190611b95565b90506000818060200190516020811015611a6957600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6000611aae8383611a8a565b611ae4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108c4565b5060006108c4565b600082815260018401602052604081205480611b515750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556113c6565b82856000016001830381548110611b6457fe5b90600052602060002090600202016001018190555060009150506113c6565b60006108c18383611ba4565b3b151590565b60606113c38484600085611c6a565b60008181526001830160205260408120548015611c605783546000198083019190810190600090879083908110611bd757fe5b9060005260206000200154905080876000018481548110611bf457fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611c2457fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506108c4565b60009150506108c4565b606082471015611cab5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f5e6026913960400191505060405180910390fd5b611cb485611b8f565b611d05576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611d445780518252601f199092019160209182019101611d25565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611da6576040519150601f19603f3d011682016040523d82523d6000602084013e611dab565b606091505b5091509150611dbb828286611dc6565b979650505050505050565b60608315611dd55750816113c6565b825115611de55782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156118b85781810151838201526020016118a0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e6d57805160ff1916838001178555611e9a565b82800160010185558215611e9a579182015b82811115611e9a578251825591602001919060010190611e7f565b50611ea6929150611eaa565b5090565b5b80821115611ea65760008155600101611eab56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212201115fd14b6ff0d6ca542992d6416ee3adc82e87556dcd1ce946b4c876e82d26d64736f6c634300060c003345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220a20fc50652b5f388f6a6370944e7fbf1ac103ca2f5af355f19805ed760f4080664736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106200025f5760003560e01c8063715018a6116200013f578063ae86041d11620000bb578063c72514aa1162000079578063c72514aa146200074d578063d87bcae21462000772578063dd62ed3e1462000797578063e7fb74c714620007bc578063f2fde38b14620007d3576200029d565b8063ae86041d146200068c578063b00f8ea514620006b1578063b4579d6014620006d6578063b46c84341462000703578063b58ce7171462000728576200029d565b806395d89b41116200010957806395d89b4114620005ed5780639ffc03b11462000605578063a457c2d7146200061d578063a51edecb1462000642578063a9059cbb1462000667576200029d565b8063715018a614620005705780637231a87614620005885780637be80b3914620005bd5780638da5cb5b14620005d5576200029d565b8063313ce56711620001db578063471de5521162000199578063471de55214620004a8578063523298de14620004cd57806362f5d6b61462000501578063685b7828146200052657806370a08231146200054b576200029d565b8063313ce56714620003e357806338af3eed146200040a5780633950935114620004315780633ccfd60b14620004565780634036ab78146200046e576200029d565b806318160ddd116200022957806318160ddd14620003525780631917a07a146200036a5780631b2ef1ca146200038f57806323b872dd14620003b45780633050673214620003d9576200029d565b80630595f16214620002a257806306fdde0314620002c7578063095ea7b314620002f75780630f432b43146200032b576200029d565b366200029d57600d546001600160a01b031633146200029b5760405162461bcd60e51b8152600401620002929062002e66565b60405180910390fd5b005b600080fd5b348015620002af57600080fd5b506200029b620002c1366004620028ac565b620007f8565b348015620002d457600080fd5b50620002df620009af565b604051620002ee919062002cef565b60405180910390f35b3480156200030457600080fd5b506200031c62000316366004620027e1565b62000a49565b604051620002ee919062002c96565b3480156200033857600080fd5b506200034362000a6b565b604051620002ee919062002a75565b3480156200035f57600080fd5b506200034362000a71565b3480156200037757600080fd5b50620003436200038936600462002930565b62000a77565b3480156200039c57600080fd5b506200029b620003ae36600462002962565b62000aa3565b348015620003c157600080fd5b506200031c620003d33660046200279c565b62000baf565b6200034362000c41565b348015620003f057600080fd5b50620003fb62000c7d565b604051620002ee919062003168565b3480156200041757600080fd5b506200042262000c86565b604051620002ee919062002a81565b3480156200043e57600080fd5b506200031c62000450366004620027e1565b62000c95565b3480156200046357600080fd5b506200029b62000cea565b3480156200047b57600080fd5b50620004936200048d36600462002930565b62000daf565b604051620002ee979695949392919062002ca1565b348015620004b557600080fd5b5062000343620004c736600462002930565b62000fb5565b348015620004da57600080fd5b50620004f2620004ec36600462002745565b62000fc7565b604051620002ee919062002c4f565b3480156200050e57600080fd5b50620003436200052036600462002962565b620010d8565b3480156200053357600080fd5b50620002df6200054536600462002930565b62001200565b3480156200055857600080fd5b50620003436200056a36600462002745565b6200129f565b3480156200057d57600080fd5b506200029b620012ba565b3480156200059557600080fd5b50620005ad620005a736600462002745565b62001350565b604051620002ee92919062002c64565b348015620005ca57600080fd5b506200029b620015a3565b348015620005e257600080fd5b50620004226200165b565b348015620005fa57600080fd5b50620002df6200166f565b3480156200061257600080fd5b5062000343620016d3565b3480156200062a57600080fd5b506200031c6200063c366004620027e1565b620016d9565b3480156200064f57600080fd5b50620003436200066136600462002930565b62001749565b3480156200067457600080fd5b506200031c62000686366004620027e1565b62001766565b3480156200069957600080fd5b506200029b620006ab36600462002930565b6200177e565b348015620006be57600080fd5b5062000343620006d036600462002745565b6200185d565b348015620006e357600080fd5b50620006ee6200190c565b604051620002ee979695949392919062002b7e565b3480156200071057600080fd5b50620002df6200072236600462002930565b62001def565b3480156200073557600080fd5b50620003436200074736600462002930565b62001e5a565b3480156200075a57600080fd5b50620003436200076c36600462002930565b62001e6c565b3480156200077f57600080fd5b50620004226200079136600462002930565b62001e7e565b348015620007a457600080fd5b5062000343620007b636600462002763565b62001e99565b62000343620007cd36600462002930565b62001ec4565b348015620007e057600080fd5b506200029b620007f236600462002745565b620020b7565b62000802620021b5565b6001600160a01b0316620008156200165b565b6001600160a01b0316146200083e5760405162461bcd60e51b815260040162000292906200300b565b60008560405160200162000853919062002a75565b6040516020818303038152906040528560405160200162000875919062002a75565b604051602081830303815290604052604051620008929062002616565b6200089f92919062002d04565b604051809103906000f080158015620008bc573d6000803e3d6000fd5b50600c8054600090815260066020908152604080832080546001600160a01b0319166001600160a01b03871617905583548352600782528083208b9055835483526009825280832089905583548352600882528083208a905592548252600a815291902085519293506200093592909186019062002624565b50600c546000908152600b6020908152604090912083516200095a9285019062002624565b50600c8054600101908190556000908152600660205260408082205490516001600160a01b03909116917f2b4d92f463e237fda874ac33e17432932f4e012d4d45b91af877361fc871840991a2505050505050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801562000a3f5780601f1062000a135761010080835404028352916020019162000a3f565b820191906000526020600020905b81548152906001019060200180831162000a2157829003601f168201915b5050505050905090565b600062000a6162000a59620021b5565b8484620021b9565b5060015b92915050565b600c5481565b60025490565b60008062000a9c4762000a9562000a8d62000a71565b869062002275565b90620022b5565b9392505050565b62000aad620021b5565b6001600160a01b031662000ac06200165b565b6001600160a01b03161462000ae95760405162461bcd60e51b815260040162000292906200300b565b6000828152600660205260408120546001600160a01b0316905b8281101562000ba9576000848152600b602052604090819020905163110bcd4560e01b81526001600160a01b0384169163110bcd459162000b4991309160040162002ab9565b602060405180830381600087803b15801562000b6457600080fd5b505af115801562000b79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9f919062002949565b5060010162000b03565b50505050565b600062000bbe848484620022eb565b62000c378462000bcd620021b5565b62000c3185604051806060016040528060288152602001620057b4602891396001600160a01b038a1660009081526001602052604081209062000c0f620021b5565b6001600160a01b0316815260208101919091526040016000205491906200240f565b620021b9565b5060019392505050565b60008062000c6a62000c5447346200243e565b62000a9562000c6262000a71565b349062002275565b905062000c78338262002469565b905090565b60055460ff1690565b600d546001600160a01b031681565b600062000a6162000ca5620021b5565b8462000c31856001600062000cb9620021b5565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906200218d565b600d546001600160a01b0316331462000d175760405162461bcd60e51b8152600401620002929062002f1e565b600e8054600091829055600d546040519192916001600160a01b0390911690839062000d439062002a7e565b60006040518083038185875af1925050503d806000811462000d82576040519150601f19603f3d011682016040523d82523d6000602084013e62000d87565b606091505b505090508062000dab5760405162461bcd60e51b8152600401620002929062002f69565b5050565b60008181526008602090815260408083205460078352818420546009845282852054600685528386205484516318160ddd60e01b81529451879687968796879687966060969295919490936001600160a01b039093169283926318160ddd92600480840193919291829003018186803b15801562000e2c57600080fd5b505afa15801562000e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e67919062002949565b60008d815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a082319062000ea690309060040162002a81565b60206040518083038186803b15801562000ebf57600080fd5b505afa15801562000ed4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000efa919062002949565b60008e8152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290929183919083018282801562000f955780601f1062000f695761010080835404028352916020019162000f95565b820191906000526020600020905b81548152906001019060200180831162000f7757829003601f168201915b505050505090509650965096509650965096509650919395979092949650565b60076020526000908152604090205481565b6060600c546001600160401b038111801562000fe257600080fd5b506040519080825280602002602001820160405280156200100d578160200160208202803683370190505b50905060005b600c54811015620010d257600081815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a08231906200105d90869060040162002a81565b60206040518083038186803b1580156200107657600080fd5b505afa1580156200108b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010b1919062002949565b828281518110620010be57fe5b602090810291909101015260010162001013565b50919050565b600082815260096020526040812054620010f3908362002275565b620010fe336200129f565b10156200111f5760405162461bcd60e51b8152600401620002929062003040565b6000838152600960205260409020546200114790339062001141908562002275565b62002534565b6000838152600660205260408120546001600160a01b0316905b83811015620011f85760405163110bcd4560e01b81526001600160a01b0383169063110bcd45906200119890339060040162002b5b565b602060405180830381600087803b158015620011b357600080fd5b505af1158015620011c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ee919062002949565b5060010162001161565b505092915050565b600a6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015620012975780601f106200126b5761010080835404028352916020019162001297565b820191906000526020600020905b8154815290600101906020018083116200127957829003601f168201915b505050505081565b6001600160a01b031660009081526020819052604090205490565b620012c4620021b5565b6001600160a01b0316620012d76200165b565b6001600160a01b031614620013005760405162461bcd60e51b815260040162000292906200300b565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b606080600c546001600160401b03811180156200136c57600080fd5b5060405190808252806020026020018201604052801562001397578160200160208202803683370190505b5091506000620013a7846200185d565b9050806001600160401b0381118015620013c057600080fd5b50604051908082528060200260200182016040528015620013eb578160200160208202803683370190505b5091506000805b600c548110156200159b57600081815260066020526040908190205490516370a0823160e01b81526001600160a01b039091169081906370a08231906200143e908a9060040162002a81565b60206040518083038186803b1580156200145757600080fd5b505afa1580156200146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001492919062002949565b8683815181106200149f57fe5b6020908102919091010152604051633918d43b60e11b81526060906001600160a01b03831690637231a87690620014db908b9060040162002a81565b60006040518083038186803b158015620014f457600080fd5b505afa15801562001509573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200153391908101906200280e565b905060005b8784815181106200154557fe5b60200260200101518110156200158f578181815181106200156257fe5b60200260200101518786815181106200157757fe5b60209081029190910101526001948501940162001538565b505050600101620013f2565b505050915091565b600d546001600160a01b03163314620015d05760405162461bcd60e51b8152600401620002929062002f1e565b600d546040516000916001600160a01b0316904790620015f09062002a7e565b60006040518083038185875af1925050503d80600081146200162f576040519150601f19603f3d011682016040523d82523d6000602084013e62001634565b606091505b5050905080620016585760405162461bcd60e51b8152600401620002929062002f69565b50565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801562000a3f5780601f1062000a135761010080835404028352916020019162000a3f565b600e5490565b600062000a61620016e9620021b5565b8462000c3185604051806060016040528060258152602001620057dc602591396001600062001717620021b5565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906200240f565b60008062000a9c6200175a62000a71565b62000a95854762002275565b600062000a6162001776620021b5565b8484620022eb565b806200178a336200129f565b1015620017ab5760405162461bcd60e51b8152600401620002929062003040565b6000620017c7620017bb62000a71565b62000a95844762002275565b9050620017d5338362002534565b6000336001600160a01b031682604051620017f09062002a7e565b60006040518083038185875af1925050503d80600081146200182f576040519150601f19603f3d011682016040523d82523d6000602084013e62001834565b606091505b5050905080620018585760405162461bcd60e51b8152600401620002929062002f69565b505050565b6000805b600c54811015620010d257600081815260066020526040908190205490516370a0823160e01b81526001600160a01b03909116906370a0823190620018ab90869060040162002a81565b60206040518083038186803b158015620018c457600080fd5b505afa158015620018d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ff919062002949565b9091019060010162001861565b6060806060806060806060600c546001600160401b03811180156200193057600080fd5b506040519080825280602002602001820160405280156200195b578160200160208202803683370190505b509650600c546001600160401b03811180156200197757600080fd5b50604051908082528060200260200182016040528015620019a2578160200160208202803683370190505b509550600c546001600160401b0381118015620019be57600080fd5b50604051908082528060200260200182016040528015620019e9578160200160208202803683370190505b509450600c546001600160401b038111801562001a0557600080fd5b5060405190808252806020026020018201604052801562001a30578160200160208202803683370190505b509350600c546001600160401b038111801562001a4c57600080fd5b5060405190808252806020026020018201604052801562001a77578160200160208202803683370190505b509250600c546001600160401b038111801562001a9357600080fd5b5060405190808252806020026020018201604052801562001abe578160200160208202803683370190505b509150600c546001600160401b038111801562001ada57600080fd5b5060405190808252806020026020018201604052801562001b1057816020015b606081526020019060019003908162001afa5790505b50905060005b600c5481101562001de55760008181526006602090815260408083205460089092529091205489516001600160a01b03909216918a908490811062001b5757fe5b602002602001018181525050600760008381526020019081526020016000205488838151811062001b8457fe5b602002602001018181525050600960008381526020019081526020016000205487838151811062001bb157fe5b60209081029190910181019190915260008381526006909152604090205486516001600160a01b039091169087908490811062001bea57fe5b6001600160a01b03929092166020928302919091018201526000838152600b82526040908190208054825160026001831615610100026000190190921691909104601f81018590048502820185019093528281529290919083018282801562001c975780601f1062001c6b5761010080835404028352916020019162001c97565b820191906000526020600020905b81548152906001019060200180831162001c7957829003601f168201915b505050505083838151811062001ca957fe5b6020026020010181905250806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001cee57600080fd5b505afa15801562001d03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d29919062002949565b85838151811062001d3657fe5b60209081029190910101526040516370a0823160e01b81526001600160a01b038216906370a082319062001d6f90309060040162002a81565b60206040518083038186803b15801562001d8857600080fd5b505afa15801562001d9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc3919062002949565b84838151811062001dd057fe5b60209081029190910101525060010162001b16565b5090919293949596565b600b6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015620012975780601f106200126b5761010080835404028352916020019162001297565b60086020526000908152604090205481565b60096020526000908152604090205481565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600081815260096020526040812054341462001ef45760405162461bcd60e51b8152600401620002929062002fe1565b600e8054340190556000828152600660205260408082205490516370a0823160e01b81526001600160a01b03909116919082906370a082319062001f3d90309060040162002a81565b60206040518083038186803b15801562001f5657600080fd5b505afa15801562001f6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f91919062002949565b1162001fb15760405162461bcd60e51b8152600401620002929062002ee7565b806001600160a01b03166323b872dd3033846001600160a01b0316637231a876306040518263ffffffff1660e01b815260040162001ff0919062002a81565b60006040518083038186803b1580156200200957600080fd5b505afa1580156200201e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200204891908101906200280e565b6000815181106200205557fe5b60200260200101516040518463ffffffff1660e01b81526004016200207d9392919062002a95565b600060405180830381600087803b1580156200209857600080fd5b505af1158015620020ad573d6000803e3d6000fd5b5050505050919050565b620020c1620021b5565b6001600160a01b0316620020d46200165b565b6001600160a01b031614620020fd5760405162461bcd60e51b815260040162000292906200300b565b6001600160a01b038116620021265760405162461bcd60e51b8152600401620002929062002d70565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008282018381101562000a9c5760405162461bcd60e51b8152600401620002929062002df8565b3390565b6001600160a01b038316620021e25760405162461bcd60e51b81526004016200029290620030ed565b6001600160a01b0382166200220b5760405162461bcd60e51b8152600401620002929062002db6565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906200226890859062002a75565b60405180910390a3505050565b600082620022865750600062000a65565b828202828482816200229457fe5b041462000a9c5760405162461bcd60e51b8152600401620002929062002fa0565b6000808211620022d95760405162461bcd60e51b8152600401620002929062002eb0565b818381620022e357fe5b049392505050565b6001600160a01b038316620023145760405162461bcd60e51b81526004016200029290620030a8565b6001600160a01b0382166200233d5760405162461bcd60e51b8152600401620002929062002d2d565b6200234a83838362001858565b6200238a816040518060600160405280602681526020016200578e602691396001600160a01b03861660009081526020819052604090205491906200240f565b6001600160a01b038085166000908152602081905260408082209390935590841681522054620023bb90826200218d565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200226890859062002a75565b60008184841115620024365760405162461bcd60e51b815260040162000292919062002cef565b505050900390565b600082821115620024635760405162461bcd60e51b8152600401620002929062002e2f565b50900390565b6001600160a01b038216620024925760405162461bcd60e51b8152600401620002929062003131565b620024a06000838362001858565b600254620024af90826200218d565b6002556001600160a01b038216600090815260208190526040902054620024d790826200218d565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200252890859062002a75565b60405180910390a35050565b6001600160a01b0382166200255d5760405162461bcd60e51b8152600401620002929062003067565b6200256b8260008362001858565b620025ab816040518060600160405280602281526020016200576c602291396001600160a01b03851660009081526020819052604090205491906200240f565b6001600160a01b038316600090815260208190526040902055600254620025d390826200243e565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200252890859062002a75565b61258c80620031e083390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200266757805160ff191683800117855562002697565b8280016001018555821562002697579182015b82811115620026975782518255916020019190600101906200267a565b50620026a5929150620026a9565b5090565b5b80821115620026a55760008155600101620026aa565b80356001600160a01b038116811462000a6557600080fd5b600082601f830112620026e9578081fd5b81356001600160401b03811115620026ff578182fd5b62002714601f8201601f191660200162003176565b91508082528360208285010111156200272c57600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121562002757578081fd5b62000a9c8383620026c0565b6000806040838503121562002776578081fd5b620027828484620026c0565b9150620027938460208501620026c0565b90509250929050565b600080600060608486031215620027b1578081fd5b8335620027be81620031c9565b92506020840135620027d081620031c9565b929592945050506040919091013590565b60008060408385031215620027f4578182fd5b620028008484620026c0565b946020939093013593505050565b6000602080838503121562002821578182fd5b82516001600160401b0381111562002837578283fd5b8301601f8101851362002848578283fd5b80516200285f62002859826200319d565b62003176565b81815283810190838501858402850186018910156200287c578687fd5b8694505b83851015620028a057805183526001949094019391850191850162002880565b50979650505050505050565b600080600080600060a08688031215620028c4578081fd5b85359450602086013593506040860135925060608601356001600160401b0380821115620028f0578283fd5b620028fe89838a01620026d8565b9350608088013591508082111562002914578283fd5b506200292388828901620026d8565b9150509295509295909350565b60006020828403121562002942578081fd5b5035919050565b6000602082840312156200295b578081fd5b5051919050565b6000806040838503121562002975578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015620029c257815187529582019590820190600101620029a4565b509495945050505050565b60008282518085526020808601955080818302840101818601855b8481101562002a1a57601f1986840301895262002a0783835162002a27565b98840198925090830190600101620029e8565b5090979650505050505050565b60008151808452815b8181101562002a4e5760208185018101518683018201520162002a30565b8181111562002a605782602083870101525b50601f01601f19169290920160200192915050565b90815260200190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006040820160018060a01b0385168352602060408185015282855460018082166000811462002af2576001811462002b115762002b4d565b60028304607f16865260ff198316606089015260808801935062002b4d565b6002830480875262002b238a620031bd565b885b8281101562002b435781548b82016060015290840190870162002b25565b8a01606001955050505b509198975050505050505050565b6001600160a01b0391909116815260406020820181905260009082015260600190565b600060e0825262002b9360e083018a62002991565b60208382038185015262002ba8828b62002991565b9150838203604085015262002bbe828a62002991565b84810360608601528851808252828a01935090820190845b8181101562002bfd5762002bec83865162002984565b938301939183019160010162002bd6565b5050848103608086015262002c13818962002991565b9250505082810360a084015262002c2b818662002991565b905082810360c084015262002c418185620029cd565b9a9950505050505050505050565b60006020825262000a9c602083018462002991565b60006040825262002c79604083018562002991565b828103602084015262002c8d818562002991565b95945050505050565b901515815260200190565b600088825287602083015286604083015260018060a01b03861660608301528460808301528360a083015260e060c083015262002ce260e083018462002a27565b9998505050505050505050565b60006020825262000a9c602083018462002a27565b60006040825262002d19604083018562002a27565b828103602084015262002c8d818562002a27565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252602a908201527f4974656d52656769737472793a204f6e6c7920616c6c6f77656420666f722062604082015269656e656669636961727960b01b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601a908201527f4974656d52656769737472793a204f7574206f662073746f636b000000000000604082015260600190565b6020808252602b908201527f4974656d52656769737472793a2063616c6c6572206973206e6f74207468652060408201526a62656e656669636961727960a81b606082015260800190565b6020808252601f908201527f4974656d52656769737472793a207769746864726177616c206661696c656400604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526010908201526f15dc9bdb99c81c1c9a58d9481c185a5960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c57726f6e672062616c616e636560981b604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b6040518181016001600160401b03811182821017156200319557600080fd5b604052919050565b60006001600160401b03821115620031b3578081fd5b5060209081020190565b60009081526020902090565b6001600160a01b03811681146200165857600080fdfe60806040523480156200001157600080fd5b506040516200258c3803806200258c833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250839150829050620001b56301ffc9a760e01b620002c3565b8151620001ca9060069060208501906200034c565b508051620001e09060079060208401906200034c565b50620001f36380ac58cd60e01b620002c3565b62000205635b5e139f60e01b620002c3565b6200021763780e9d6360e01b620002c3565b50600090506200022662000348565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506040805180820190915260158082527f68747470733a2f2f697066732e696f2f697066732f00000000000000000000006020909201918252620002ba91600d916200034c565b505050620003e8565b6001600160e01b0319808216141562000323576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038f57805160ff1916838001178555620003bf565b82800160010185558215620003bf579182015b82811115620003bf578251825591602001919060010190620003a2565b50620003cd929150620003d1565b5090565b5b80821115620003cd5760008155600101620003d2565b61219480620003f86000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80636c0360eb116100b857806395d89b411161007c57806395d89b41146104bc578063a22cb465146104c4578063b88d4fde146104f2578063c87b56dd146105b8578063e985e9c5146105d5578063f2fde38b1461060357610142565b80636c0360eb1461040857806370a0823114610410578063715018a6146104365780637231a8761461043e5780638da5cb5b146104b457610142565b806318160ddd1161010a57806318160ddd1461032e57806323b872dd146103365780632f745c591461036c57806342842e0e146103985780634f6ccce7146103ce5780636352211e146103eb57610142565b806301ffc9a71461014757806306fdde0314610182578063081812fc146101ff578063095ea7b314610238578063110bcd4514610266575b600080fd5b61016e6004803603602081101561015d57600080fd5b50356001600160e01b031916610629565b604080519115158252519081900360200190f35b61018a61064c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c45781810151838201526020016101ac565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61021c6004803603602081101561021557600080fd5b50356106e2565b604080516001600160a01b039092168252519081900360200190f35b6102646004803603604081101561024e57600080fd5b506001600160a01b038135169060200135610744565b005b61031c6004803603604081101561027c57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156102a757600080fd5b8201836020820111156102b957600080fd5b803590602001918460018302840111640100000000831117156102db57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061081f945050505050565b60408051918252519081900360200190f35b61031c6108ca565b6102646004803603606081101561034c57600080fd5b506001600160a01b038135811691602081013590911690604001356108db565b61031c6004803603604081101561038257600080fd5b506001600160a01b0381351690602001356108e6565b610264600480360360608110156103ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610908565b61031c600480360360208110156103e457600080fd5b5035610923565b61021c6004803603602081101561040157600080fd5b5035610939565b61018a610961565b61031c6004803603602081101561042657600080fd5b50356001600160a01b03166109c2565b610264610a2a565b6104646004803603602081101561045457600080fd5b50356001600160a01b0316610ae8565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104a0578181015183820152602001610488565b505050509050019250505060405180910390f35b61021c610b76565b61018a610b85565b610264600480360360408110156104da57600080fd5b506001600160a01b0381351690602001351515610be6565b6102646004803603608081101561050857600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561054357600080fd5b82018360208201111561055557600080fd5b8035906020019184600183028401116401000000008311171561057757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ceb945050505050565b61018a600480360360208110156105ce57600080fd5b5035610d49565b61016e600480360360408110156105eb57600080fd5b506001600160a01b0381358116916020013516610fcc565b6102646004803603602081101561061957600080fd5b50356001600160a01b0316610ffa565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b5050505050905090565b60006106ed8261110f565b6107285760405162461bcd60e51b815260040180806020018281038252602c81526020018061205d602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061074f82610939565b9050806001600160a01b0316836001600160a01b031614156107a25760405162461bcd60e51b815260040180806020018281038252602181526020018061210d6021913960400191505060405180910390fd5b806001600160a01b03166107b461111c565b6001600160a01b031614806107d557506107d5816107d061111c565b610fcc565b6108105760405162461bcd60e51b8152600401808060200182810382526038815260200180611fb06038913960400191505060405180910390fd5b61081a8383611120565b505050565b600061082961111c565b6001600160a01b031661083a610b76565b6001600160a01b031614610895576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61089f600b61118e565b60006108ab600b611197565b90506108b7848261119b565b6108c181846112c9565b90505b92915050565b60006108d6600261132c565b905090565b61081a838383611337565b6001600160a01b03821660009081526001602052604081206108c1908361138e565b61081a83838360405180602001604052806000815250610ceb565b60008061093160028461139a565b509392505050565b60006108c48260405180606001604052806029815260200161201260299139600291906113b6565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b60006001600160a01b038216610a095760405162461bcd60e51b815260040180806020018281038252602a815260200180611fe8602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090206108c49061132c565b610a3261111c565b6001600160a01b0316610a43610b76565b6001600160a01b031614610a9e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b60606000610af5836109c2565b90508067ffffffffffffffff81118015610b0e57600080fd5b50604051908082528060200260200182016040528015610b38578160200160208202803683370190505b50915060005b81811015610b6f57610b5084826108e6565b838281518110610b5c57fe5b6020908102919091010152600101610b3e565b5050919050565b600a546001600160a01b031690565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b610bee61111c565b6001600160a01b0316826001600160a01b03161415610c54576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610c6161111c565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610ca561111c565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610cfc610cf661111c565b836113cd565b610d375760405162461bcd60e51b815260040180806020018281038252603181526020018061212e6031913960400191505060405180910390fd5b610d4384848484611471565b50505050565b6060610d548261110f565b610d8f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120de602f913960400191505060405180910390fd5b6000828152600c602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505090506060610e356114c3565b9050805160001415610e4957509050610647565b815115610f0a5780826040516020018083805190602001908083835b60208310610e845780518252601f199092019160209182019101610e65565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610ecc5780518252601f199092019160209182019101610ead565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610647565b80610f1485611524565b6040516020018083805190602001908083835b60208310610f465780518252601f199092019160209182019101610f27565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610f8e5780518252601f199092019160209182019101610f6f565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61100261111c565b6001600160a01b0316611013610b76565b6001600160a01b03161461106e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166110b35760405162461bcd60e51b8152600401808060200182810382526026815260200180611f146026913960400191505060405180910390fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006108c46002836115ff565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061115582610939565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b80546001019055565b5490565b6001600160a01b0382166111f6576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6111ff8161110f565b15611251576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b61125d6000838361081a565b6001600160a01b038216600090815260016020526040902061127f908261160b565b5061128c60028284611617565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6112d28261110f565b61130d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612089602c913960400191505060405180910390fd5b6000828152600c60209081526040909120825161081a92840190611e2c565b60006108c482611197565b61134861134261111c565b826113cd565b6113835760405162461bcd60e51b815260040180806020018281038252603181526020018061212e6031913960400191505060405180910390fd5b61081a83838361162d565b60006108c18383611779565b60008080806113a986866117dd565b9097909650945050505050565b60006113c3848484611858565b90505b9392505050565b60006113d88261110f565b6114135760405162461bcd60e51b815260040180806020018281038252602c815260200180611f84602c913960400191505060405180910390fd5b600061141e83610939565b9050806001600160a01b0316846001600160a01b031614806114595750836001600160a01b031661144e846106e2565b6001600160a01b0316145b8061146957506114698185610fcc565b949350505050565b61147c84848461162d565b61148884848484611922565b610d435760405162461bcd60e51b8152600401808060200182810382526032815260200180611ee26032913960400191505060405180910390fd5b600d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d85780601f106106ad576101008083540402835291602001916106d8565b60608161154957506040805180820190915260018152600360fc1b6020820152610647565b8160005b811561156157600101600a8204915061154d565b60608167ffffffffffffffff8111801561157a57600080fd5b506040519080825280601f01601f1916602001820160405280156115a5576020820181803683370190505b50859350905060001982015b83156115f657600a840660300160f81b828280600190039350815181106115d457fe5b60200101906001600160f81b031916908160001a905350600a840493506115b1565b50949350505050565b60006108c18383611a8a565b60006108c18383611aa2565b60006113c384846001600160a01b038516611aec565b826001600160a01b031661164082610939565b6001600160a01b0316146116855760405162461bcd60e51b81526004018080602001828103825260298152602001806120b56029913960400191505060405180910390fd5b6001600160a01b0382166116ca5760405162461bcd60e51b8152600401808060200182810382526024815260200180611f3a6024913960400191505060405180910390fd5b6116d583838361081a565b6116e0600082611120565b6001600160a01b03831660009081526001602052604090206117029082611b83565b506001600160a01b0382166000908152600160205260409020611725908261160b565b5061173260028284611617565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b815460009082106117bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ec06022913960400191505060405180910390fd5b8260000182815481106117ca57fe5b9060005260206000200154905092915050565b8154600090819083106118215760405162461bcd60e51b815260040180806020018281038252602281526020018061203b6022913960400191505060405180910390fd5b600084600001848154811061183257fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816118f35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118b85781810151838201526020016118a0565b50505050905090810190601f1680156118e55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061190657fe5b9060005260206000209060020201600101549150509392505050565b6000611936846001600160a01b0316611b8f565b61194257506001611469565b6060611a50630a85bd0160e11b61195761111c565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119be5781810151838201526020016119a6565b50505050905090810190601f1680156119eb5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611ee2603291396001600160a01b0388169190611b95565b90506000818060200190516020811015611a6957600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6000611aae8383611a8a565b611ae4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108c4565b5060006108c4565b600082815260018401602052604081205480611b515750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556113c6565b82856000016001830381548110611b6457fe5b90600052602060002090600202016001018190555060009150506113c6565b60006108c18383611ba4565b3b151590565b60606113c38484600085611c6a565b60008181526001830160205260408120548015611c605783546000198083019190810190600090879083908110611bd757fe5b9060005260206000200154905080876000018481548110611bf457fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611c2457fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506108c4565b60009150506108c4565b606082471015611cab5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f5e6026913960400191505060405180910390fd5b611cb485611b8f565b611d05576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611d445780518252601f199092019160209182019101611d25565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611da6576040519150601f19603f3d011682016040523d82523d6000602084013e611dab565b606091505b5091509150611dbb828286611dc6565b979650505050505050565b60608315611dd55750816113c6565b825115611de55782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156118b85781810151838201526020016118a0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e6d57805160ff1916838001178555611e9a565b82800160010185558215611e9a579182015b82811115611e9a578251825591602001919060010190611e7f565b50611ea6929150611eaa565b5090565b5b80821115611ea65760008155600101611eab56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212201115fd14b6ff0d6ca542992d6416ee3adc82e87556dcd1ce946b4c876e82d26d64736f6c634300060c003345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220a20fc50652b5f388f6a6370944e7fbf1ac103ca2f5af355f19805ed760f4080664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 556,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 558,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 560,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 562,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 564,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 7,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3775,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3779,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemTypes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 3783,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemSymbols",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 3787,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemPrices",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3791,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemMetadatas",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3795,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemImages",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3797,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_itemCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3799,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "beneficiary",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3801,
        "contract": "contracts/ItemRegistry.sol:ItemRegistry",
        "label": "_shopRevenue",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}